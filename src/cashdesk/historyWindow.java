/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package cashdesk;

import java.io.IOException;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JFormattedTextField;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import mysqlwrapper.ConnectionInfo;
import mysqlwrapper.Database;
import mysqlwrapper.MemberDetails;
import mysqlwrapper.SQLResultsHandler;
import mysqlwrapper.Settings;

/**
 *
 * @author gavin
 */
public class historyWindow extends javax.swing.JFrame {

    private Date date = null;
    private final String getVisitorsOnQuery = "CALL GetVisitorsOn('%s');";
    private final String getVisitorHistoryQuery = "CALL getVisitorHistory('%s');";
    private DefaultListModel visitorListModel = new DefaultListModel();
    private DefaultListModel visitorHistoryModel = new DefaultListModel();
    private int idList[];
    
    /**
     * Creates new form historyWindow
     */
    public historyWindow() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        visitorDateField = new javax.swing.JFormattedTextField();
        loadButton = new java.awt.Button();
        jScrollPane1 = new javax.swing.JScrollPane();
        visitorList = new javax.swing.JList<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        visitorHistory = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });

        visitorDateField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter(java.text.DateFormat.getDateInstance(java.text.DateFormat.SHORT))));

        loadButton.setLabel("Load");
        loadButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadButtonActionPerformed(evt);
            }
        });

        visitorList.setModel(visitorListModel);
        visitorList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                visitorListMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(visitorList);

        visitorHistory.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Date", "Buyin", "Cashout"
            }
        ));
        jScrollPane2.setViewportView(visitorHistory);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(visitorDateField, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(174, 174, 174)
                        .addComponent(loadButton, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 406, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 19, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(visitorDateField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(loadButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 327, Short.MAX_VALUE))
                .addContainerGap(46, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
    // the purpose of this funstion is to fecth the list of members 
    // who visited the casino on this date
    
    private void loadButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadButtonActionPerformed
      
        String s =  visitorDateField.getText();
        if (s.isEmpty())
        {
            return;
        }
        
        try {
            date = new SimpleDateFormat("dd/MM/yy", Locale.ENGLISH).parse(s);
             getVisitorsOn(date);
        } catch (ParseException ex) {
            Logger.getLogger(historyWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
          
    }//GEN-LAST:event_loadButtonActionPerformed

    private void visitorListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_visitorListMouseClicked
        
        int si = visitorList.getSelectedIndex();
        if(si < 0)
        {
            return;
        }
        
        DefaultTableModel model = (DefaultTableModel) visitorHistory.getModel();
        model.setRowCount(0);
    
        getVisitorHistory(idList[si],model);
    }//GEN-LAST:event_visitorListMouseClicked

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        int i = 0;
        i++;
    }//GEN-LAST:event_formWindowClosed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(historyWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(historyWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(historyWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(historyWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new historyWindow().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private java.awt.Button loadButton;
    private javax.swing.JFormattedTextField visitorDateField;
    private javax.swing.JTable visitorHistory;
    private javax.swing.JList<String> visitorList;
    // End of variables declaration//GEN-END:variables



private void getVisitorsOn(Date date)
    {
        try 
        {
            ConnectionInfo ci = new ConnectionInfo(Settings.getInstance().getDefaultUser());
            Database db = new Database(ci);                  
          
            java.sql.Timestamp dateTimeField = new Timestamp(date.getTime());
            String query = String.format(getVisitorsOnQuery,dateTimeField);
            ResultSet res = db.PerformQuery(query);
            List<Object[]> data = SQLResultsHandler.GetResults(res);
            db.close();
            
            visitorListModel.clear();                
            idList = new int[data.size()];
            for(int i = 0; i < data.size(); i++)
            {           
                String name = (String)data.get(i)[3] + " " + (String)data.get(i)[2]; 
                visitorListModel.addElement(name);
                idList[i] = (int)data.get(i)[1];
            }
            
            visitorList.repaint();
        } 
        
        catch (ClassNotFoundException | IOException 
                 | SQLException | InstantiationException | IllegalAccessException ex) 
        {
            ex.printStackTrace();
        }
    }


    private void getVisitorHistory(int id, DefaultTableModel model)
    {
        assert(date != null);
        
        try 
        {
            ConnectionInfo ci = new ConnectionInfo(Settings.getInstance().getDefaultUser());
            Database db = new Database(ci);     
            
            String query = String.format(getVisitorHistoryQuery,id);
            ResultSet res = db.PerformQuery(query);
            List<Object[]> data = SQLResultsHandler.GetResults(res);
            db.close();
            
            model.setNumRows(data.size());
            for(int i = 0; i < data.size(); i++)
            {           
                Date date = (Date) (data.get(i)[0]);
                int buyin = (int) data.get(i)[2];
                int cashout = (int) data.get(i)[3]; 
                
                visitorHistory.setValueAt(date.toString(), i, 0);
                visitorHistory.setValueAt(buyin, i, 1);
                visitorHistory.setValueAt(cashout, i, 2);
            }
            
            visitorHistory.repaint();
        } 
        
        catch (ClassNotFoundException | IOException 
                 | SQLException | InstantiationException | IllegalAccessException ex) 
        {
            ex.printStackTrace();
        }
    }

}
