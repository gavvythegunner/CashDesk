/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package cashdesk;

import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.RenderingHints;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Comparator;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.TimerTask;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Persistence;
import javax.persistence.Query;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.JDialog;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.Timer;
import javax.swing.table.TableModel;
import mysqlwrapper.ConnectionInfo;
import mysqlwrapper.Database;
import mysqlwrapper.MemberDetails;
import mysqlwrapper.SQLResultsHandler;
import mysqlwrapper.Settings;

/**
 *
 * @author gavin
 */
public class CashDeskMainWindow extends javax.swing.JFrame {

    private final String getVisitorsHQuery = "CALL GetVisitorHistory('%s');";
    private final String getVisitorsQuery = "CALL GetVisitors('%s');";
    private String getIdFromCardQuery = "CALL GetIdFromCard('%s');";
    
    private List<MemberDetails> loggedInMembers = new ArrayList<>();
    private List<MemberDetails> oldloggedInMembers = new ArrayList<>(); // allows for updating of members list rather than total refresh
    
    private List<VisitInstance> visitorHistory = new ArrayList<>();
    private DefaultListModel logedInMembersModel = new DefaultListModel();
    private static int keypresscount;
    private static String cardnum = "";
    private int currLogedIn = 0;
    
    private static final EntityManagerFactory emFactory;

    static {
        emFactory = Persistence.createEntityManagerFactory("CashDeskPU");
    }

    public static EntityManager getEntityManager() {
        return emFactory.createEntityManager();
    }
    private MemberDetails currentMemberSelected;

     
    /**
     * Creates new form MainWindow
     */
    public CashDeskMainWindow() {      
        initComponents();
        setDomain(null);
        GetLoggedIn();
    //    CreateMonitorthread();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuItem1 = new javax.swing.JMenuItem();
        jScrollPane1 = new javax.swing.JScrollPane();
        FloorViewTable = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        loggedInMembersList = new javax.swing.JList();
        memberDetailsLabel = new javax.swing.JLabel();
        Domain = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        cashinField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        cashoutField = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jTextField3 = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        newMemberCount = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        currentyLoggetInTextField = new javax.swing.JLabel();
        saveButton = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        nameLabel = new javax.swing.JLabel();
        idLabel = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        HistoryMenu = new javax.swing.JMenu();
        domainMenu = new javax.swing.JMenu();
        jMenuItem2 = new javax.swing.JMenuItem();

        jMenuItem1.setText("jMenuItem1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        FloorViewTable.setBackground(new java.awt.Color(240, 240, 240));
        FloorViewTable.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        FloorViewTable.setModel(getFloorViewTableModel());
        FloorViewTable.setToolTipText("");
        FloorViewTable.setCellSelectionEnabled(true);
        FloorViewTable.setGridColor(new java.awt.Color(255, 255, 255));
        FloorViewTable.setIntercellSpacing(new java.awt.Dimension(10, 10));
        FloorViewTable.setName("domain"); // NOI18N
        FloorViewTable.setRowHeight(200);
        FloorViewTable.setSelectionBackground(new java.awt.Color(240, 240, 240));
        FloorViewTable.setSelectionForeground(new java.awt.Color(240, 240, 240));
        FloorViewTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        FloorViewTable.setTableHeader(null);
        FloorViewTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                FloorViewTableMouseClicked(evt);
            }
        });
        FloorViewTable.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                FloorViewTableKeyTyped(evt);
            }
        });
        jScrollPane1.setViewportView(FloorViewTable);

        loggedInMembersList.setBackground(new java.awt.Color(204, 204, 255));
        loggedInMembersList.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        loggedInMembersList.setFont(new java.awt.Font("Sylfaen", 0, 14)); // NOI18N
        loggedInMembersList.setModel(logedInMembersModel);
        loggedInMembersList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                loggedInMembersListMouseClicked(evt);
            }
        });
        loggedInMembersList.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                loggedInMembersListKeyPressed(evt);
            }
        });
        jScrollPane3.setViewportView(loggedInMembersList);

        memberDetailsLabel.setBackground(new java.awt.Color(153, 153, 153));
        memberDetailsLabel.setForeground(new java.awt.Color(204, 204, 255));
        memberDetailsLabel.setBorder(new javax.swing.border.MatteBorder(null));
        memberDetailsLabel.setOpaque(true);
        memberDetailsLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                memberDetailsLabelMouseClicked(evt);
            }
        });
        memberDetailsLabel.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                memberDetailsLabelKeyPressed(evt);
            }
        });

        Domain.setToolTipText("");

        jLabel1.setText("Cash In :");

        cashinField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cashinFieldActionPerformed(evt);
            }
        });

        jLabel2.setText("Cash Out :");

        cashoutField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cashoutFieldActionPerformed(evt);
            }
        });

        jLabel3.setText("Player P / L :");

        jLabel4.setText("New Members :");

        jLabel6.setText("Currently Logged In :");

        saveButton.setText("Save");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        jLabel8.setText("Name :");

        jLabel11.setText("Id :");

        jButton2.setText("Refresh");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        HistoryMenu.setText("History");
        HistoryMenu.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        HistoryMenu.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                HistoryMenuMouseClicked(evt);
            }
        });
        HistoryMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HistoryMenuActionPerformed(evt);
            }
        });
        jMenuBar1.add(HistoryMenu);

        domainMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                domainMenuActionPerformed(evt);
            }
        });

        jMenuItem2.setText("bankcasino.cjvxief54zzo.eu-west-1.rds.amazonaws.com");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        domainMenu.add(jMenuItem2);

        jMenuBar1.add(domainMenu);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(layout.createSequentialGroup()
                            .addGap(8, 8, 8)
                            .addComponent(jLabel4)
                            .addGap(112, 112, 112))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(newMemberCount)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel6)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(currentyLoggetInTextField)))
                            .addGap(27, 27, 27)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)))
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 517, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(memberDetailsLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addContainerGap())
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel1)
                                            .addComponent(jLabel2))
                                        .addGap(27, 27, 27)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(cashoutField, javax.swing.GroupLayout.DEFAULT_SIZE, 60, Short.MAX_VALUE)
                                            .addComponent(cashinField))
                                        .addGap(18, 18, 18)
                                        .addComponent(jLabel8)
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(idLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(nameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel3)
                                        .addGap(18, 18, 18)
                                        .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(0, 54, Short.MAX_VALUE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(55, 55, 55)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(saveButton, javax.swing.GroupLayout.DEFAULT_SIZE, 246, Short.MAX_VALUE)
                            .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addContainerGap())))
            .addGroup(layout.createSequentialGroup()
                .addGap(276, 276, 276)
                .addComponent(Domain, javax.swing.GroupLayout.PREFERRED_SIZE, 386, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(Domain)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 700, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(memberDetailsLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 249, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(35, 35, 35)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(nameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel1)
                                        .addComponent(cashinField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel8)))
                                .addGap(11, 11, 11)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel2)
                                    .addComponent(cashoutField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel11)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(126, 126, 126)
                                .addComponent(idLabel)))
                        .addGap(101, 101, 101)
                        .addComponent(saveButton, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(44, 44, 44)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(newMemberCount))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(currentyLoggetInTextField))
                        .addGap(37, 37, 37)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 502, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void FloorViewTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_FloorViewTableMouseClicked

        int col = FloorViewTable.getSelectedColumn();
        int row = FloorViewTable.getSelectedRow();

        int index = col + (row * 3);

        if(index >= loggedInMembers.size())
        {
            return;
        }

        loggedInMembersList.setSelectedIndex(index);
        loggedInMembersList.requestFocus();

        loggedInMembersList.ensureIndexIsVisible(index);

        displayMemberDetails(loggedInMembers.get(index));
    }//GEN-LAST:event_FloorViewTableMouseClicked

    private void FloorViewTableKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_FloorViewTableKeyTyped

        int rfdilen  = Settings.getInstance().getrfidCodeLength();
        char ch = evt.getKeyChar();

        if(!(Character.isAlphabetic(ch) || Character.isDigit(ch)) && (keypresscount < rfdilen))
        {
            evt.consume();
            return;
        }

        keypresscount++;
        cardnum += ch;

        if(keypresscount == rfdilen + 1)
        {
            // we remove the return key predd the rfid reader appends
            cardnum = cardnum.substring(0,rfdilen);
            evt.consume();

            try
            {
                String CardId;
                int num;

                ConnectionInfo ci;
                
                ci = new ConnectionInfo(Settings.getInstance().getDefaultUser());
                Database db = new Database(ci);
                
                String query = String.format(getIdFromCardQuery,cardnum);
                ResultSet res = db.PerformQuery(query);
                List<Object[]> data = SQLResultsHandler.GetResults(res);
                db.close();

                if( data.isEmpty())
                {
                    JOptionPane.showMessageDialog(rootPane,"No member assigned to this card!");
                    keypresscount = 0;
                    cardnum = "";
                    return;
                }

                MemberDetails memberDetails = new MemberDetails((int) (data.get(0)[0]));
              //  LogIn(memberDetails,false);
            }

            catch (ClassNotFoundException | SQLException | IOException |
                InstantiationException | IllegalAccessException ex)
            {
                JOptionPane.showMessageDialog(rootPane,"Error logging member in!");
                return;
            }

            keypresscount = 0;
            cardnum = "";
        }

    }//GEN-LAST:event_FloorViewTableKeyTyped

    private void loggedInMembersListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_loggedInMembersListMouseClicked

        int si = loggedInMembersList.getSelectedIndex();
        if(si < 0)
        {
            return;
        }

        FloorViewTable.changeSelection(si/3,si%3, false, false);
        FloorViewTable.requestFocus();

        displayMemberDetails(loggedInMembers.get(si));
    }//GEN-LAST:event_loggedInMembersListMouseClicked

    private void loggedInMembersListKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_loggedInMembersListKeyPressed

        FloorViewTableKeyTyped(evt);
    }//GEN-LAST:event_loggedInMembersListKeyPressed

    private void memberDetailsLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_memberDetailsLabelMouseClicked
        if(memberDetailsLabel.getIcon() != null)
        {
     //       new EnlargeId(this,true).setVisible(true);
        }
    }//GEN-LAST:event_memberDetailsLabelMouseClicked

    private void memberDetailsLabelKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_memberDetailsLabelKeyPressed

        FloorViewTableKeyTyped(evt);
    }//GEN-LAST:event_memberDetailsLabelKeyPressed

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        
        EntityManager em = getEntityManager();
        em.getTransaction().begin();
        
        int id = (int)currentMemberSelected.getMemberDetails().get("mem_serial_number"); 
        Query q=em.createNamedQuery("Visit.findByVisitorIdLatest");
        q.setParameter("visitorId", id);
        q.setMaxResults(1); // cant use MSQL LIMIT operator in jpql see findByVisitorIdLatest in visit.jave
        List<Visit> l=q.getResultList();
        
        String ci = cashinField.getText();
        if (ci.isEmpty())
        {
            ci = "0";
        }
        
        String co = cashoutField.getText();
        if (co.isEmpty())
        {
            co = "0";
        }
  
        Visit v = l.get(0);
        
        if(v.getVisitBuyin() == null)
        {
            v.setVisitBuyin(new Integer(0));
        }
        
        if(v.getVisitCashout() == null)
        {
            v.setVisitCashout(new Integer(0));
        }
        
     //   if(creditCardTransaction.isSelected())
     //   {
     //       v.setVisitCreditcard(1);
     //   }
        
        v.setVisitBuyin(v.getVisitBuyin() + Integer.parseInt(ci));         
        v.setVisitCashout(v.getVisitCashout() + Integer.parseInt(co));
        
        em.persist(v);
        em.flush();
        em.getTransaction().commit();
        em.close();
                
        cashinField.setText(null);
        cashoutField.setText(null);
               
        // this was added to simply indicate thats the info was saved....
       JOptionPane.showMessageDialog(this, "Transaction Saved for Customer : " + id);
              
    }//GEN-LAST:event_saveButtonActionPerformed

    private void HistoryMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HistoryMenuActionPerformed
        
        new historyWindow().setVisible(true);
        
    }//GEN-LAST:event_HistoryMenuActionPerformed

    private void HistoryMenuMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_HistoryMenuMouseClicked
         new historyWindow().setVisible(true);
         
    }//GEN-LAST:event_HistoryMenuMouseClicked

    private void cashinFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cashinFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cashinFieldActionPerformed

    private void cashoutFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cashoutFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cashoutFieldActionPerformed

    private void domainMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_domainMenuActionPerformed

        
    }//GEN-LAST:event_domainMenuActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        setDomain("bankcasino.cjvxief54zzo.eu-west-1.rds.amazonaws.com");
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        GetLoggedIn();
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CashDeskMainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CashDeskMainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CashDeskMainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CashDeskMainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CashDeskMainWindow().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Domain;
    private javax.swing.JTable FloorViewTable;
    private javax.swing.JMenu HistoryMenu;
    private javax.swing.JTextField cashinField;
    private javax.swing.JTextField cashoutField;
    private javax.swing.JLabel currentyLoggetInTextField;
    private javax.swing.JMenu domainMenu;
    private javax.swing.JLabel idLabel;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JList loggedInMembersList;
    private javax.swing.JLabel memberDetailsLabel;
    private javax.swing.JLabel nameLabel;
    private javax.swing.JLabel newMemberCount;
    private javax.swing.JButton saveButton;
    // End of variables declaration//GEN-END:variables



  
    private TableModel getFloorViewTableModel() {
       return(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                 {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                 {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                 {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                 {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                 {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                 {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
            },
            new String [] {
                "", "", ""
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Byte.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return javax.swing.ImageIcon.class;
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
    }

 /*
     *  display MemberDetails
     * 
     *  param : memberdetails object
     * 
     *  fill the memberdetails list with pertinent info.
     */
    
    public void displayMemberDetails(MemberDetails md) 
    {
        if(md == null) // md is null when called from logout so as to clear icon
        {
            memberDetailsLabel.setIcon(null);
            return;
        }
         
        if(md.getMemberDetails().get("idScanFile") == null)
        {
            memberDetailsLabel.setIcon(null);
            return;
        }
        
        ImageIcon idImage = (ImageIcon) md.getMemberDetails().get("idScanFile");
        idImage.setImage(getScaledImage(idImage.getImage(),450,249));
        memberDetailsLabel.setIcon(idImage);
        memberDetailsLabel.repaint();
        
        currentMemberSelected = md;
        
        String s = (String) md.getMemberDetails().get("mem_forenames");
        String s1 = (String) md.getMemberDetails().get("mem_surname");
        String name = s + " " + s1;
        nameLabel.setText(name);
        idLabel.setText(md.getMemberDetails().get("mem_serial_number").toString());
    }



     static  Image getScaledImage(Image srcImg, int w, int h)
     {
        BufferedImage resizedImg = new BufferedImage(w, h, BufferedImage.TYPE_INT_RGB);
        Graphics2D g2 = resizedImg.createGraphics();
        g2.setRenderingHint(RenderingHints.KEY_INTERPOLATION, RenderingHints.VALUE_INTERPOLATION_BILINEAR);
        g2.drawImage(srcImg, 0, 0, w, h, null);
        g2.dispose();
        return resizedImg;
    }
     
     
    public void displayLoggedIn(MemberDetails member,boolean reStart)
    {       
        Map<String,Object> details = member.getMemberDetails();
        
        ImageIcon Photo = (ImageIcon) details.get("imagFile");
        if(Photo != null) // no image for member, camera bust 2 yrs ago!
        {
            Photo.setImage(getScaledImage(Photo.getImage(),120,120));
        }
        else{
            Photo = new ImageIcon("x.png");
            Photo.setImage(getScaledImage(Photo.getImage(),120,120));
        }       
        
         // the index in the list loggedinmembers will be the same as the index in logedInMembersList
         FloorViewTable.setValueAt(Photo,currLogedIn/3 , currLogedIn%3);
         currLogedIn++;
         logedInMembersModel.addElement(details.get("mem_forenames") + " " + details.get("mem_surname"));
         displayMemberDetails(member);
    }
    
     public void GetLoggedIn()
    {
        try 
        {
            ConnectionInfo ci = new ConnectionInfo(Settings.getInstance().getDefaultUser());
            Database db = new Database(ci);
                      
            Calendar now = Calendar.getInstance();
            if((now.get(Calendar.HOUR) >= 0) && (now.get(Calendar.HOUR) < 12)) // after midnight 
            {
                now.add(Calendar.DATE, -1);  
                now.set(Calendar.HOUR, 20);
                now.set(Calendar.MINUTE,0);
            }   
            
            System.out.print("GetLoggedIn : Before query\n");
            
            // esential this is the format '2012-03-18 20:00:00'
            java.util.Date d = (java.util.Date) now.getTime();
            java.sql.Timestamp dateTimeField = new Timestamp(d.getTime());
            String query = String.format(getVisitorsQuery,dateTimeField);
            ResultSet res = db.PerformQuery(query);
            List<Object[]> data = SQLResultsHandler.GetResults(res);
            db.close();
            
            System.out.print("GetLoggedIn : After query\n");
            
           UpdateLoggedInList(data);
           
           System.out.print("GetLoggedIn : After UpdateLogginList\n");
            
        } 
        
        catch (ClassNotFoundException | IOException 
                 | SQLException | InstantiationException | IllegalAccessException ex) 
        {
            System.out.println("wrong domain or user in config file....");
            ex.printStackTrace();
        }
    }

    private void setDomain(String domain) {
        try {
            if(domain == null)
            {       // this is the default domain its the test db
                domain = Settings.getInstance().getDomain();
                domainMenu.setText(domain);
            }else{
                domainMenu.setText(domain);
            }
            
                Settings.getInstance().setDomain(domain);
            
        } catch (IOException ex) {
            Logger.getLogger(CashDeskMainWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void CreateMonitorthread() 
    {
        MonitorThread timerTask = new MonitorThread();
        timerTask.setNewMemberCount(newMemberCount); 
        timerTask.setMainWindow(this);
        Timer timer = new Timer(1000*30, timerTask); 
        timer.start();
    }

    private boolean isAlreadyLoggedIn(String string) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    
    
    void fetchTransactions(Date date) 
    {
        assert(date != null);
        
        try 
        {
            ConnectionInfo ci = new ConnectionInfo(Settings.getInstance().getDefaultUser());
            Database db = new Database(ci);     
            
            String query = String.format(getVisitorsQuery,date);
            ResultSet res = db.PerformQuery(query);
            List<Object[]> data = SQLResultsHandler.GetResults(res);
            db.close();
            
            for(int i = 0; i < data.size(); i++)
            { 
                Date d = (Date) (data.get(i)[0]);
                int id = (int) data.get(i)[1];
                int buyin = (int) data.get(i)[4];
                int cashout = (int) data.get(i)[5]; 
                        
                VisitInstance v = new VisitInstance(d,id,buyin,cashout);
                visitorHistory.add(v);  
                            
                //
                //
                //  BUG? WILL WE NO BE ADDING THIS VISIT AS SECOND IN LIST?
                //  hence k = 1 below
                
                query = String.format(getVisitorsHQuery,id);
                res = db.PerformQuery(query);
                data = SQLResultsHandler.GetResults(res);
                db.close();
                    
                for (int k = 1; k < data.size(); k++) 
                {
                    d = (Date) (data.get(k)[0]);
                    id = (int) data.get(k)[1];
                    buyin = (int) data.get(k)[4];
                    cashout = (int) data.get(k)[5];

                    VisitInstance vi = new VisitInstance(d, id, buyin, cashout);
      //              v.setPrevVisit(vi);
                }
            }  
            
        } 
        
        catch (ClassNotFoundException | IOException 
                 | SQLException | InstantiationException | IllegalAccessException ex) 
        {
            ex.printStackTrace();
        }
    }

    private void UpdateLoggedInList( List<Object[]> data ) throws ClassNotFoundException {
                
        MemberDetails m = null;
        
        for (int i = 0; i < data.size(); i++) 
        {
            try {
               
                long ot = System.nanoTime();
               
                int sn = (int) data.get(i)[1];
                if(newLogin(loggedInMembers,sn))
                {             
                    m = new MemberDetails((int) data.get(i)[1]);
                    loggedInMembers.add(m);
                    displayLoggedIn(m, true);
                }
                
              } 
            
            catch (SQLException | IOException | InstantiationException | IllegalAccessException ex) 
            {
                Logger.getLogger(CashDeskMainWindow.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        
        currentyLoggetInTextField.setText(new Integer(currLogedIn).toString());
    }

    private boolean newLogin(List<MemberDetails> om, int sn) 
    {
        int i = 0;
        
        for(int k = 0; k < om.size(); k++)
        {
            MemberDetails j = om.get(k);         
            Map<String, Object> md = j.getMemberDetails();
            int num = (int) md.get("mem_serial_number");
                                    
            if(num == sn)
                return false;
        }        
        
        return true;
    }
}
